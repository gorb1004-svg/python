class Parent():
    def __init__(self):
        print('부모 생성자 실행!')

class Child(Parent):
    def __init__(self):
        super().__init__() # 생략된 부모 생성자
        print('자식 생성자 실행!')

ch = Child()



# 부모가 초기화가 필요 하다면 자식에게 값을 전달해서 자식이 부모에게 전달하도록 한다.
class SchoolMember: # 부모
    name = ''
    age = 0

    def __init__(self, name, age): # 3. 받아온 값으로 초기화 하고 객체화 된다.
                    ## -> 부모의 생성자 안에 네임과 나이를 객체에 저장한다.(부모 객체의 특성을 생성하고, 네임과 에이지의 정보를 입력하고,)
                    ## -> 이제 t.name는 김철수, t.age는 33가 된다.

        self.name = name
        self.age = age

class Teacher(SchoolMember): # 자식
    salary = 0

    def __init__(self, name, age, salary):
        super().__init__(name, age) # 2. 부모를 먼저 객체화 시키면서 초기화할 값을 전달
                    ## -> init 실행으로 (부모의 정보를 가져오기 위해)객체화 시키면서 초기화할 값을 부모에게 전달한다.




        self.salary = salary    # 4. 그리고 나서 내각 초기화 하면서 객체화 된다.
                                ## -> 부모 속성이 끝난 뒤 자식 셀러리를 초기화 한다.
                                ## 이제 t.salary는 5천만원이 된다.


                                # 1.Teacher 라는 클래스를 객체화 한다.(초기화를 위해 매개변수를 전달)
                                ## -> Teacher 라는 클래스를 이용해서 객체화를 만든다.
                                ## -> 이때, 네임 김철수, 나이,33, 연봉,5천만원이라는 값을 전달한다.
                                ## -> 즉, Teacher 클래스에서 김철수라는 교사를 만듬.
t = Teacher('김철수',33,50000000)



                                # 5. name 과 age 는 부모것 이지만 내것처럼 내 객체에서 가져다 쓸 수 있게 된다.
print(f'{t.name}({t.age}) - {t.salary}')


# 1. 티처가 스쿨멤버의 클래스를 상속받아 네임과 나이, 스쿨멤버의 생성자 함수의 특성을 받습니다.
# -> 스쿨멤버와 티처 간의 관계 설명
#2. 그래서 티처 객체를 생성하게되면 티처에 있는 생성자 함수에 간 후 suprt()를 통해 부모 클래스에 있는 생성자함수에 접근합니다.
# -> 티처 객체 생성시 접근하는 생성자 함수 설명
#3. 부모 클레스에 있는 생성자 함수에 접근할 때, 자식 클래스에 있는 매개변수를 부모 클래스에 있는 매개변수로 가져와 부모 클래스에 있는 네임과 나이를 입력합니다.
#-> 부모 클래스 생성자 함수 설명
#4. 그 후 남은 셀러리 매개변수를 티처에 있는 변수 셀러리에 입력합니다. 이렇게 티처 객체를 완성하여 변수 t에 입력해줍니다.
#-> 자식 클래스 생성자 함수 설명
#5. 부모 클래스와 자식 클래스의 특성을 모두 가진 t를 통해 부모 클래스 변수 네임과 나이 및 자식클레스의 셀러리까지 모두 사용 가능합니다.
-> 생성된 티처 객체가 갖는 특성 설명
